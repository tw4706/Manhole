#include "Bg.h"
#include "DxLib.h"
#include"Game.h"

namespace
{
	// チップの大きさ
	constexpr int kChipWidth = 32;
	constexpr int kChipHeight = 32;
	// チップの数(X・Y方向)
	constexpr int kChipNumX = Game::kScreenWidth / kChipWidth;
	constexpr int kChipNumY = Game::kScreenHeight / kChipHeight+1;
	// チップの配置
	constexpr int kChipSetting[kChipNumY][kChipNumX] =
	{
		{32,33,34,35,36,37,38,39,40,41,42,43,44,55,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160},
		{192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{32,33,34,35,36,37,38,39,40,41,42,43,44,55,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128},
		{35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128}
	};
}

Bg::Bg():
	m_handle(-1),
	m_graphChipNumX(0),
	m_graphChipNumY(0)
{
}

Bg::~Bg()
{
}

void Bg::Init(int _hadle)
{
	m_handle = _hadle;
	// チップの数を計算
	int graphWidth = 0;
	int graphHeight = 0;
	GetGraphSize(m_handle, &graphWidth, &graphHeight);
	m_graphChipNumX = graphWidth / kChipWidth;
	m_graphChipNumY = graphHeight / kChipHeight;
	int chipMax = m_graphChipNumX * m_graphChipNumY;
	printfDx("graphWidth = %d, graphHeight = %d\n", graphWidth, graphHeight);
	printfDx("chipNumX = %d, chipNumY = %d\n", m_graphChipNumX, m_graphChipNumY);
}

void Bg::End()
{
	
}

void Bg::Update()
{

}

void Bg::Draw()
{
	// チップの配置を元に背景を描画
	for (int y = 0; y < kChipNumY; ++y)
	{
		for (int x = 0; x < kChipNumX; ++x)
		{
			int chipNo = kChipSetting[y][x];
			// 有効なチップNumかチェック
			if (chipNo >= 0 && chipNo < m_graphChipNumX * m_graphChipNumY)
			{
				// チップの表示位置
				int dstX = x * kChipWidth;
				int dstY = y * kChipHeight;
				// 何番目であるかの情報に変換
				int srcX = (chipNo % m_graphChipNumX) * kChipWidth;
				int srcY = (chipNo / m_graphChipNumX) * kChipHeight;

				DrawRectGraph(dstX, dstY,
					srcX, srcY,
					kChipWidth, kChipHeight,
					m_handle, true, false);
			}
		}
	}
}


